% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chatgpt.R
\name{summarize_narrative}
\alias{summarize_narrative}
\title{Summarize the narrative output with ChatGPT}
\usage{
summarize_narrative(
  narrative,
  prompt = "Summarize the following narrative to make it shorter:",
  openai_api_key = Sys.getenv("OPENAI_API_KEY"),
  max_tokens = 1024,
  temperature = 0.5,
  top_p = 1,
  frequency_penalty = 0,
  presence_penalty = 0
)
}
\arguments{
\item{narrative}{List of narratives returned by narrate_* function, character vector or string that will be enhanced by ChatGPT}

\item{prompt}{Prompt to send to OpenAI API}

\item{openai_api_key}{Your OpenAI API key, you can set it up in .Renviron file as "OPENAI_API_KEY", function will look for it with \code{Sys.getenv("OPENAI_API_KEY")}}

\item{max_tokens}{The maximum number of tokens to generate in the chat completion.}

\item{temperature}{What sampling temperature to use, between 0 and 2. Higher
values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.}

\item{top_p}{An alternative to sampling with temperature, called nucleus sampling, where the model considers
the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10\% probability mass are considered.}

\item{frequency_penalty}{Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
decreasing the model's likelihood to repeat the same line verbatim.}

\item{presence_penalty}{Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
increasing the model's likelihood to talk about new topics.}
}
\value{
\code{\link[=character]{character()}} of narratives enhanced by ChatGPT
}
\description{
Summarize the narrative output with ChatGPT
}
\examples{
\dontrun{
narrative <- sales \%>\%
dplyr::filter(Product \%in\% c("Tools", "Clothing", "Home")) \%>\%
  dplyr::group_by(Product, Region)  \%>\%
  dplyr::summarise(Sales = sum(Sales)) \%>\%
  narrate_descriptive()

narrative <- enhance_narrative(narrative)
summarize_narrative(narrative)
}
}
